0xb4f04794	node
0xb4f03854	RecPrint
0xb4f03d54	ifound
0xb4f02994	RemoveLeft
0xb4f02a94	auxkey1
0xb4f02314	found
0xb4f02b34	c_node
0xb4f019d4	current_node
0xb4f01a94	cont
0xb4f01df4	num2
0xb4f02d74	Remove
0xb4f01e54	num1
0xb4f02a34	auxkey2
0xb4f00134	Init
0xb4f001f4	nti
0xb4f002b4	root
0xb4f004b4	a
0xb4f002f4	Tree
0xb4f00434	Start
0xb4f02b94	p_node
0xb4f01a34	key_aux
0xb4f01eb4	Compare
0xb4f00614	if
0xb4f01374	GetLeft
0xb4f01094	SetHas_Left
0xb4f004f4	BinaryTree
0xb4f00574	this
0xb4f01114	GetHas_Left
0xb4f006b4	public
0xb4f028b4	RemoveRight
0xb4f00674	static
0xb4f00014	Insert
0xb4f00594	false
0xb4f00554	new
0xb4f00834	has_left
0xb4f013f4	GetRight
0xb4f00654	void
0xb4f00694	private
0xb4f023b4	parent_node
0xb4f005b4	true
0xb4f00254	ntb
0xb4f00a94	Delete
0xb4f00634	extends
0xb4f000b4	Print
0xb4f006f4	class
0xb4f00cb4	Search
0xb4f01f94	SetHas_Right
0xb4f022b4	is_root
0xb4f01b34	new_node
0xb4f008f4	right
0xb4f00954	left
0xb4f00894	key
0xb4f005f4	while
0xb4f015f4	SetRight
0xb4f017d4	has_right
0xb4f01774	my_null
0xb4f016d4	v_key
0xb4f01594	rn
0xb4f014f4	SetLeft
0xb4f012f4	GetKey
0xb4f00474	BT
0xb4f01494	ln
0xb4f005d4	return
0xb4f01274	SetKey
0xb4f01194	GetHas_Right
0xb4f01034	val
