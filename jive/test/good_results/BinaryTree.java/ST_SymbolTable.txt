0xb4e04794	node
0xb4e03854	RecPrint
0xb4e03d54	ifound
0xb4e02994	RemoveLeft
0xb4e02a94	auxkey1
0xb4e02314	found
0xb4e02b34	c_node
0xb4e019d4	current_node
0xb4e01a94	cont
0xb4e01df4	num2
0xb4e02d74	Remove
0xb4e01e54	num1
0xb4e02a34	auxkey2
0xb4e00134	Init
0xb4e001f4	nti
0xb4e002b4	root
0xb4e004b4	a
0xb4e002f4	Tree
0xb4e00434	Start
0xb4e02b94	p_node
0xb4e01a34	key_aux
0xb4e01eb4	Compare
0xb4e00614	if
0xb4e01374	GetLeft
0xb4e01094	SetHas_Left
0xb4e004f4	BinaryTree
0xb4e00574	this
0xb4e01114	GetHas_Left
0xb4e006b4	public
0xb4e028b4	RemoveRight
0xb4e00674	static
0xb4e00014	Insert
0xb4e00594	false
0xb4e00554	new
0xb4e00834	has_left
0xb4e013f4	GetRight
0xb4e00654	void
0xb4e00694	private
0xb4e023b4	parent_node
0xb4e005b4	true
0xb4e00254	ntb
0xb4e00a94	Delete
0xb4e00634	extends
0xb4e000b4	Print
0xb4e006f4	class
0xb4e00cb4	Search
0xb4e01f94	SetHas_Right
0xb4e022b4	is_root
0xb4e01b34	new_node
0xb4e008f4	right
0xb4e00954	left
0xb4e00894	key
0xb4e005f4	while
0xb4e015f4	SetRight
0xb4e017d4	has_right
0xb4e01774	my_null
0xb4e016d4	v_key
0xb4e01594	rn
0xb4e014f4	SetLeft
0xb4e012f4	GetKey
0xb4e00474	BT
0xb4e01494	ln
0xb4e005d4	return
0xb4e01274	SetKey
0xb4e01194	GetHas_Right
0xb4e01034	val
